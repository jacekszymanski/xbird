/* Generated By:JavaCC: Do not edit this line. XQueryParserConstants.java */
/*
 * @(#)$Id: XQueryParserConstants.java 3619 2008-03-26 07:23:03Z yui $
 *
 * Copyright 2006-2008 Makoto YUI
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *     Makoto YUI - initial implementation
 */
package xbird.xquery.parser;

public interface XQueryParserConstants {

    int EOF = 0;
    int DecimalLiteral = 2;
    int DotDot = 3;
    int Dot = 4;
    int DoubleLiteral = 5;
    int IntegerLiteral = 6;
    int NotNumber = 7;
    int DeclareConstruction = 8;
    int DeclareDefaultOrder = 9;
    int DeclareCollation = 10;
    int DeclareNamespace = 11;
    int ModuleNamespace = 12;
    int DeclareBaseURI = 13;
    int DeclareDefaultElement = 14;
    int DeclareDefaultFunction = 15;
    int ImportSchemaToken = 16;
    int ImportModuleToken = 17;
    int DeclareCopyNamespace = 18;
    int Some = 19;
    int Every = 20;
    int DefineVariable = 21;
    int XmlCommentStart = 22;
    int ProcessingInstructionStart = 23;
    int CdataSectionStart = 24;
    int StartTagOpenRoot = 25;
    int DeclareXMLSpace = 26;
    int ValidateLbrace = 27;
    int ValidateSchemaMode = 28;
    int TypeswitchLpar = 29;
    int ElementLbrace = 30;
    int AttributeLbrace = 31;
    int AttributeQNameLbrace = 32;
    int ElementQNameLbrace = 33;
    int DocumentLbrace = 34;
    int TextLbrace = 35;
    int PILbrace = 36;
    int PINCNameLbrace = 37;
    int CommentLbrace = 38;
    int DefineFunction = 39;
    int OrderedOpen = 40;
    int UnorderedOpen = 41;
    int ExecuteAt = 42;
    int DeclareOrdering = 43;
    int XQueryVersion = 44;
    int DeclareOption = 45;
    int IfLpar = 46;
    int AxisAncestorOrSelf = 47;
    int AxisAncestor = 48;
    int AxisAttribute = 49;
    int AxisChild = 50;
    int AxisDescendantOrSelf = 51;
    int AxisDescendant = 52;
    int AxisFollowingSibling = 53;
    int AxisFollowing = 54;
    int AxisParent = 55;
    int AxisPrecedingSibling = 56;
    int AxisPreceding = 57;
    int AxisSelf = 58;
    int At = 59;
    int ElementType = 60;
    int AttributeType = 61;
    int SchemaElementType = 62;
    int SchemaAttributeType = 63;
    int CommentLparRpar = 64;
    int TextLparRpar = 65;
    int NodeLparRpar = 66;
    int DocumentLpar = 67;
    int ProcessingInstructionLpar = 68;
    int NCNameColonStar = 69;
    int StarColonNCName = 70;
    int QNameLpar = 71;
    int Rpar = 72;
    int ForVariable = 73;
    int LetVariable = 74;
    int Rbrace = 75;
    int Plus = 76;
    int SlashSlash = 77;
    int Slash = 78;
    int StringLiteral = 79;
    int Star = 80;
    int VariableIndicator = 81;
    int RparAs = 82;
    int Comma = 83;
    int Minus = 84;
    int LbraceExprEnclosure = 85;
    int PragmaOpen = 86;
    int Lpar = 87;
    int AtURILiteral = 88;
    int SemiColon = 89;
    int Ordered = 90;
    int Unordered = 91;
    int Then = 92;
    int Else = 93;
    int External = 94;
    int And = 95;
    int AtWord = 96;
    int ColonEquals = 97;
    int Div = 98;
    int Equals = 99;
    int Except = 100;
    int FortranEq = 101;
    int FortranGe = 102;
    int FortranGt = 103;
    int FortranLe = 104;
    int FortranLt = 105;
    int FortranNe = 106;
    int GtEquals = 107;
    int GtGt = 108;
    int Gt = 109;
    int Idiv = 110;
    int Intersect = 111;
    int In = 112;
    int Is = 113;
    int Lbrack = 114;
    int LtEquals = 115;
    int LtLt = 116;
    int Lt = 117;
    int Mod = 118;
    int NotEquals = 119;
    int OrderBy = 120;
    int OrderByStable = 121;
    int Or = 122;
    int Return = 123;
    int Satisfies = 124;
    int To = 125;
    int Union = 126;
    int Vbar = 127;
    int Where = 128;
    int Castable = 129;
    int CastAs = 130;
    int Instanceof = 131;
    int TreatAs = 132;
    int Case = 133;
    int As = 134;
    int Multiply = 135;
    int SchemaModeForDeclareConstruction = 136;
    int EmptyGreatest = 137;
    int EmptyLeast = 138;
    int Ascending = 139;
    int Descending = 140;
    int Default = 141;
    int Rbrack = 142;
    int Collation = 143;
    int NotOperatorKeyword = 144;
    int OccurrenceZeroOrOne = 145;
    int StringLiteralForVersion = 146;
    int XQueryEncoding = 147;
    int URILiteral = 148;
    int CommaForURITransition = 149;
    int AssignEquals = 150;
    int NCNameForPrefix = 151;
    int URILiteralToOperator = 152;
    int Inherit = 153;
    int NoInherit = 154;
    int Namespace = 155;
    int DefaultElement = 156;
    int Preserve = 157;
    int NoPreserve = 158;
    int CommaForCopyNamespace = 159;
    int XMLSpacePreserve = 160;
    int XMLSpaceStrip = 161;
    int EmptySequence = 162;
    int ElementTypeForKindTest = 163;
    int AttributeTypeForKindTest = 164;
    int SchemaElementTypeForKindTest = 165;
    int SchemaAttributeTypeForKindTest = 166;
    int CommentLparRparForKindTest = 167;
    int TextLparRparForKindTest = 168;
    int NodeLparRparForKindTest = 169;
    int DocumentLparForKindTest = 170;
    int ProcessingInstructionLparForKindTest = 171;
    int QNameForSequenceType = 172;
    int Item = 173;
    int QNameForAtomicType = 174;
    int RparForKindTest = 175;
    int AnyName = 176;
    int QNameForItemType = 177;
    int ElementTypeForDocumentTest = 178;
    int SchemaElementTypeForDocumentTest = 179;
    int NCNameForPI = 180;
    int StringLiteralForKindTest = 181;
    int CommaForKindTest = 182;
    int Nillable = 183;
    int OccurrenceOneOrMore = 184;
    int NotOccurrenceIndicator = 185;
    int QNameForOption = 186;
    int QNameForPragma = 187;
    int QName = 188;
    int S = 189;
    int PragmaContents = 190;
    int PragmaClose = 191;
    int VarName = 192;
    int EmptyTagClose = 193;
    int StartTagClose = 194;
    int OpenQuot = 195;
    int OpenApos = 196;
    int ValueIndicator = 197;
    int TagQName = 198;
    int EndTagOpen = 199;
    int XmlCommentStartForElementContent = 200;
    int ProcessingInstructionStartForElementContent = 201;
    int CdataSectionStartForElementContent = 202;
    int StartTagOpen = 203;
    int Lbrace = 204;
    int PredefinedEntityRef = 205;
    int CharRef = 206;
    int LCurlyBraceEscape = 207;
    int RCurlyBraceEscape = 208;
    int ElementContentChar = 209;
    int EndTagClose = 210;
    int XmlCommentEnd = 211;
    int CommentContentChar = 212;
    int CommentContentCharDash = 213;
    int SForPI = 214;
    int PITarget = 215;
    int ProcessingInstructionEnd = 216;
    int PIContentChar = 217;
    int CdataSectionEnd = 218;
    int CDataSectionChar = 219;
    int CloseQuot = 220;
    int EscapeQuot = 221;
    int QuotAttrContentChar = 222;
    int CloseApos = 223;
    int EscapeApos = 224;
    int AposAttrContentChar = 225;
    int Comment = 226;
    int CommentStart = 227;
    int CommentContent = 228;
    int CommentEnd = 229;
    int CommentContents = 230;
    int skip_ = 231;
    int Prefix = 232;
    int LocalPart = 233;
    int ValidationMode = 234;
    int Nmstart = 235;
    int Nmchar = 236;
    int Digits = 237;
    int HexDigits = 238;
    int NCName = 239;
    int Char = 240;
    int ExtensionContentChar = 241;
    int WhitespaceChar = 242;
    int Letter = 243;
    int BaseChar = 244;
    int Ideographic = 245;
    int CombiningChar = 246;
    int Digit = 247;
    int Extender = 248;
    int space_ = 249;

    int DEFAULT = 0;
    int DECLAREORDERING = 1;
    int OPERATOR = 2;
    int XQUERYVERSION = 3;
    int NAMESPACEDECL = 4;
    int URITOOPERATOR = 5;
    int NAMESPACEKEYWORD = 6;
    int XMLSPACE_DECL = 7;
    int SINGLETYPE = 8;
    int ITEMTYPE = 9;
    int KINDTEST = 10;
    int KINDTESTFORPI = 11;
    int CLOSEKINDTEST = 12;
    int OPTION = 13;
    int PRAGMA = 14;
    int PRAGMACONTENTS = 15;
    int VARNAME = 16;
    int EXPR_COMMENT = 17;
    int XQUERYD = 18;
    int NODETEST = 19;
    int OCCURRENCEINDICATOR = 20;
    int START_TAG = 21;
    int END_TAG = 22;
    int ELEMENT_CONTENT = 23;
    int QUOT_ATTRIBUTE_CONTENT = 24;
    int APOS_ATTRIBUTE_CONTENT = 25;
    int XML_COMMENT = 26;
    int PROCESSING_INSTRUCTION = 27;
    int PROCESSING_INSTRUCTION_CONTENT = 28;
    int CDATA_SECTION = 29;

    String[] tokenImage = { "<EOF>", "<token of kind 1>", "<DecimalLiteral>", "\"..\"", "\".\"",
            "<DoubleLiteral>", "<IntegerLiteral>", "<NotNumber>", "<DeclareConstruction>",
            "<DeclareDefaultOrder>", "<DeclareCollation>", "<DeclareNamespace>",
            "<ModuleNamespace>", "<DeclareBaseURI>", "<DeclareDefaultElement>",
            "<DeclareDefaultFunction>", "<ImportSchemaToken>", "<ImportModuleToken>",
            "<DeclareCopyNamespace>", "<Some>", "<Every>", "<DefineVariable>", "\"<!--\"",
            "\"<?\"", "\"<![CDATA[\"", "\"<\"", "<DeclareXMLSpace>", "<ValidateLbrace>",
            "<ValidateSchemaMode>", "<TypeswitchLpar>", "<ElementLbrace>", "<AttributeLbrace>",
            "<AttributeQNameLbrace>", "<ElementQNameLbrace>", "<DocumentLbrace>", "<TextLbrace>",
            "<PILbrace>", "<PINCNameLbrace>", "<CommentLbrace>", "<DefineFunction>",
            "<OrderedOpen>", "<UnorderedOpen>", "<ExecuteAt>", "<DeclareOrdering>",
            "<XQueryVersion>", "<DeclareOption>", "<IfLpar>", "\"ancestor-or-self::\"",
            "\"ancestor::\"", "\"attribute::\"", "\"child::\"", "\"descendant-or-self::\"",
            "\"descendant::\"", "\"following-sibling::\"", "\"following::\"", "\"parent::\"",
            "\"preceding-sibling::\"", "\"preceding::\"", "\"self::\"", "\"@\"", "<ElementType>",
            "<AttributeType>", "<SchemaElementType>", "<SchemaAttributeType>", "<CommentLparRpar>",
            "<TextLparRpar>", "<NodeLparRpar>", "<DocumentLpar>", "<ProcessingInstructionLpar>",
            "<NCNameColonStar>", "<StarColonNCName>", "<QNameLpar>", "\")\"", "<ForVariable>",
            "<LetVariable>", "\"}\"", "\"+\"", "\"//\"", "\"/\"", "<StringLiteral>", "\"*\"",
            "\"$\"", "<RparAs>", "\",\"", "\"-\"", "\"{\"", "\"(#\"", "\"(\"", "<AtURILiteral>",
            "\";\"", "\"ordered\"", "\"unordered\"", "\"then\"", "\"else\"", "\"external\"",
            "\"and\"", "\"at\"", "\":=\"", "\"div\"", "\"=\"", "\"except\"", "\"eq\"", "\"ge\"",
            "\"gt\"", "\"le\"", "\"lt\"", "\"ne\"", "\">=\"", "\">>\"", "\">\"", "\"idiv\"",
            "\"intersect\"", "\"in\"", "\"is\"", "\"[\"", "\"<=\"", "\"<<\"", "\"<\"", "\"mod\"",
            "\"!=\"", "<OrderBy>", "<OrderByStable>", "\"or\"", "\"return\"", "\"satisfies\"",
            "\"to\"", "\"union\"", "\"|\"", "\"where\"", "<Castable>", "<CastAs>", "<Instanceof>",
            "<TreatAs>", "\"case\"", "\"as\"", "\"*\"", "<SchemaModeForDeclareConstruction>",
            "<EmptyGreatest>", "<EmptyLeast>", "\"ascending\"", "\"descending\"", "\"default\"",
            "\"]\"", "\"collation\"", "<NotOperatorKeyword>", "\"?\"", "<StringLiteralForVersion>",
            "\"encoding\"", "<URILiteral>", "\",\"", "\"=\"", "<NCNameForPrefix>",
            "<URILiteralToOperator>", "\"inherit\"", "\"no-inherit\"", "\"namespace\"",
            "<DefaultElement>", "\"preserve\"", "\"no-preserve\"", "\",\"", "\"preserve\"",
            "\"strip\"", "<EmptySequence>", "<ElementTypeForKindTest>",
            "<AttributeTypeForKindTest>", "<SchemaElementTypeForKindTest>",
            "<SchemaAttributeTypeForKindTest>", "<CommentLparRparForKindTest>",
            "<TextLparRparForKindTest>", "<NodeLparRparForKindTest>", "<DocumentLparForKindTest>",
            "<ProcessingInstructionLparForKindTest>", "<QNameForSequenceType>", "<Item>",
            "<QNameForAtomicType>", "\")\"", "\"*\"", "<QNameForItemType>",
            "<ElementTypeForDocumentTest>", "<SchemaElementTypeForDocumentTest>", "<NCNameForPI>",
            "<StringLiteralForKindTest>", "\",\"", "\"?\"", "\"+\"", "<NotOccurrenceIndicator>",
            "<QNameForOption>", "<QNameForPragma>", "<QName>", "<S>", "<PragmaContents>", "\"#)\"",
            "<VarName>", "\"/>\"", "\">\"", "\"\\\"\"", "\"\\\'\"", "\"=\"", "<TagQName>",
            "\"</\"", "\"<!--\"", "\"<?\"", "\"<![CDATA[\"", "\"<\"", "\"{\"",
            "<PredefinedEntityRef>", "<CharRef>", "\"{{\"", "\"}}\"", "<ElementContentChar>",
            "\">\"", "\"-->\"", "<CommentContentChar>", "<CommentContentCharDash>", "<SForPI>",
            "<PITarget>", "\"?>\"", "<PIContentChar>", "<CdataSectionEnd>", "<CDataSectionChar>",
            "\"\\\"\"", "\"\\\"\\\"\"", "<QuotAttrContentChar>", "\"\\\'\"", "\"\\\'\\\'\"",
            "<AposAttrContentChar>", "<Comment>", "\"(:\"", "<CommentContent>", "\":)\"",
            "<CommentContents>", "<skip_>", "<Prefix>", "<LocalPart>", "<ValidationMode>",
            "<Nmstart>", "<Nmchar>", "<Digits>", "<HexDigits>", "<NCName>", "<Char>",
            "<ExtensionContentChar>", "<WhitespaceChar>", "<Letter>", "<BaseChar>",
            "<Ideographic>", "<CombiningChar>", "<Digit>", "<Extender>", "<space_>", };

}
